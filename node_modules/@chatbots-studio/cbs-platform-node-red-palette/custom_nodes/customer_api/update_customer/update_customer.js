const axios = require('axios');

const { envConfig: { customerApiEnvConfig } } = require('../../../config');
const { handleNodeError } = require('../../../error');
const { customLogger } = require('../../../logger');

module.exports = function (RED) {
  function UpdateCustomerNode(config) {
    RED.nodes.createNode(this, config);
    const node = this;

    node.on('input', async function (msg, send, done) {
      const logger = customLogger(this);

      logger.addParam('_application', 'Node-RED/CustomerAPI.Update Customer');

      try {
        const env = await customerApiEnvConfig();

        const props = {
          chatId: RED.util.evaluateNodeProperty(config.chatId, config.chatIdType, this, msg),
          channel: RED.util.evaluateNodeProperty(config.channel, config.channelType, this, msg)
        }

        Object.entries(props).forEach(([key, value]) => {
          if (!value) {
            throw new Error(`\"${key}\" field is empty`);
          }
        });

        logger.addParam('userID', `${props.chatId}_${props.channel}`);

        const dataToUpdate = {};

        await config.props.forEach(p => {
          const { property = null, value = '', valueType = 'str' } = p;

          if (property) {
            let propertyValue = RED.util.evaluateNodeProperty(value, valueType, this, msg);
            if (typeof propertyValue === 'object') {
              propertyValue = JSON.stringify(propertyValue);
            }
            dataToUpdate[property] = propertyValue;
          }
        });

        const requestOptions = {
          data: JSON.stringify(dataToUpdate),
          method: 'PUT',
          headers: {
            'authorization': env.CUSTOMER_API_KEY,
            'content-type': 'application/json',
          },
          url: `${env.CUSTOMER_API_URL}/v1/customers/${props.chatId}`,
        };

        logger.addParam('outUrl', requestOptions.url);
        logger.addParam('request', requestOptions);

        msg = { payload: await axios(requestOptions) };

        logger.addParam('statusCode', msg.payload.status);
        logger.addParam('response', msg.payload.data);

        logger.logInfo();

        send(msg);
        done();
      } catch
        (error) {
        await handleNodeError(error, logger, this, msg);

        done();
      }
    });
  }

  RED.nodes.registerType("update-customer", UpdateCustomerNode);
}
