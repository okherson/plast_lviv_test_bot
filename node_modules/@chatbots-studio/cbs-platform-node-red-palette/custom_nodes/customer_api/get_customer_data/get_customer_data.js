const axios = require('axios');
const urlJoin = require('url-join');

const { envConfig: { customerApiEnvConfig } } = require('../../../config');
const { handleNodeError } = require('../../../error');
const { customLogger } = require('../../../logger');

module.exports = function (RED) {
  function GetCustomerDataNode(config) {
    RED.nodes.createNode(this, config);

    const node = this;

    node.on('input', async function (msg, send, done) {
      const logger = customLogger(this);

      logger.addParam('_application', 'Node-RED/CustomerAPI.Get Customer Data');

      try {
        const env = await customerApiEnvConfig();

        const props = {
          channel: RED.util.evaluateNodeProperty(config.channel, config.channelType, this, msg),
          chatId: RED.util.evaluateNodeProperty(config.chatId, config.chatIdType, this, msg),
          customerId: RED.util.evaluateNodeProperty(config.customerId, config.customerIdType, this, msg),
        };

        Object.entries(props).forEach(([key, value]) => {
          if (!value) {
            throw new Error(`\"${ key }\" field is empty`);
          }
        });

        logger.addParam('userID', `${props.chatId}_${props.channel}`);

        const requestOptions = {
          method: 'GET',
          headers: {
            'authorization': env.CUSTOMER_API_KEY,
            'content-type': 'application/json',
          },
          url: urlJoin(env.CUSTOMER_API_URL, 'admin-tools/customers', `?customerId=${ props.customerId }`),
        };

        logger.addParam('outUrl', requestOptions.url);
        logger.addParam('request', requestOptions);

        const response = await axios(requestOptions);
        msg = {
          status: response.status,
          payload:response.data.data
        };

        logger.addParam('statusCode', msg.payload.status);
        logger.addParam('response', msg.payload.data);

        logger.logInfo();

        send(msg);
        done();
      } catch (error) {
        await handleNodeError(error, logger, this, msg);

        done();
      }
    });
  }

  RED.nodes.registerType("get-customer-data", GetCustomerDataNode);
};
